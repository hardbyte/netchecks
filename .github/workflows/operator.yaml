name: Operator CI

on:
  release:
    types: [published]
  pull_request:
  push:
    branches: [ main ]
    tags:
      - 'v*'

defaults:
  run:
    shell: bash

env:
  KIND_VERSION: v0.17.0
  KIND_CONFIG: .github/kind-config.yaml
  TIMEOUT: 2m
  LOG_TIME: 30m
  cilium_version: v1.12.2
  cilium_cli_version: v0.12.9
  kubectl_version: v1.23.6

jobs:
  docker:
    name: Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write # needed for signing the images with GitHub OIDC Token
    env:
      IMAGE_NAME: netchecks-operator
      IMAGE_REGISTRY: ghcr.io
      IMAGE_REPOSITORY: hardbyte

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{env.IMAGE_REGISTRY}}/${{env.IMAGE_REPOSITORY}}/${{env.IMAGE_NAME}}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: operator
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
#      - name: Install Cosign
#        uses: sigstore/cosign-installer@main
#      - name: Sign the images with GitHub OIDC Token
#        run: cosign sign --yes ${TAGS}
#        if: github.event_name != 'pull_request'
#        env:
#          TAGS: ${{ steps.meta.outputs.tags }}


  k8s:
    name: Kubernetes Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install Python Dependencies
        run: |
          cd operator
          poetry install --no-interaction --with dev
      - name: Install kubectl
        run: |
          curl -sLO "https://dl.k8s.io/release/${{ env.kubectl_version }}/bin/linux/amd64/kubectl"
          curl -sLO "https://dl.k8s.io/${{ env.kubectl_version }}/bin/linux/amd64/kubectl.sha256"
          echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client

      - name: Install cilium CLI binary
        run: |
          curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${{ env.cilium_cli_version }}/cilium-linux-amd64.tar.gz{,.sha256sum}
          sha256sum --check cilium-linux-amd64.tar.gz.sha256sum
          sudo tar xzvfC cilium-linux-amd64.tar.gz /usr/local/bin

      - name: Create kind cluster
        uses: helm/kind-action@v1.4.0
        with:
          version: ${{ env.KIND_VERSION }}

      - name: Get Cluster Info
        run: |
          kubectl cluster-info
          export KUBE_API=$(kubectl config view -o jsonpath='{.clusters[0].cluster.server}')

      - name: Install Netcheck Operator via Helm
        run: |
          helm dependency build operator/charts/netchecks

      - name: Run Integration Tests (no Cilium)
        run: |
          cd operator
          poetry run pytest
        timeout-minutes: 10

      # Install Cilium with HostPort support for extended connectivity test.
      - name: Install Cilium
        run: |
          cilium install \
            --version=${{ env.cilium_version }} \
            --wait=false \
            --config monitor-aggregation=none \
            --helm-set cni.chainingMode=portmap

      - name: Enable Hubble Relay
        run: |
          cilium hubble enable --ui

      - name: Relay Port Forward
        run: |
          cilium hubble port-forward&
          sleep 10s
          [[ $(pgrep -f "cilium.*hubble.*port-forward|kubectl.*port-forward.*hubble-relay" | wc -l) == 2 ]]

      - name: Run Integration Tests (with Cilium)
        run: |
          cd operator
          INCLUDE_CILIUM_TESTS=1 poetry run pytest

        timeout-minutes: 10

      - name: Cleanup
        if: ${{ always() }}
        run: |
          cilium status
          kubectl get pods --all-namespaces -o wide
        shell: bash {0} # Disable default fail-fast behaviour so that all commands run independently
