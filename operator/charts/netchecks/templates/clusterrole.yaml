apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ include "netchecks.fullname" . }}
rules:
  # Kopf Framework: knowing which other operators are running (i.e. peering).
  - apiGroups: [kopf.dev]
    resources: [clusterkopfpeerings]
    verbs: [list, watch, patch, get]

  # Kopf Framework: runtime observation of namespaces & CRDs (addition/deletion).
  - apiGroups: [apiextensions.k8s.io]
    resources: [customresourcedefinitions]
    verbs: [list, watch]
  - apiGroups: [""]
    resources: [namespaces]
    verbs: [list, watch]

  # Kopf Framework: admission webhook configuration management.
  - apiGroups: [admissionregistration.k8s.io/v1, admissionregistration.k8s.io/v1beta1]
    resources: [validatingwebhookconfigurations, mutatingwebhookconfigurations]
    verbs: [create, patch]

  # This could be restricted to our operator namespace
  # Framework: posting the events about the handlers progress/errors.
  - apiGroups: [""]
    resources: [events]
    verbs: [create]

  # Application: Access to our NetworkAssertions cluster-wide
  # Note we don't create or delete them - that's up to the user.
  - apiGroups: [netchecks.io]
    resources: [networkassertions]
    verbs: [list, get, watch, patch, update]

  - apiGroups: [wgpolicyk8s.io]
    resources: [policyreports]
    verbs: [list, get, patch, create, update, watch]

  # Application: other resources we produce and manipulate
  # The operator can create and delete CronJobs & Jobs
  - apiGroups: [batch, extensions]
    resources: [jobs, cronjobs]
    verbs: [create, delete]
  # We directly create config maps. At some point we may need to patch them.
  - apiGroups: [""]
    resources: [configmaps]
    verbs: [create, delete]

  # The can be restricted to our operator namespace:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch", "patch"]

  - apiGroups: [""]
    resources: ["pods/log"]
    verbs: ["get", "list", "watch"]

  - apiGroups: [""]
    resources: ["pods/status"]
    verbs: ["get", "patch"]
